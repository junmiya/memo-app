rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read and write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Room access rules
    match /rooms/{roomId} {
      // Allow read access for public rooms or if user is a participant
      allow read: if resource.data.visibility == 'public' || 
                     (request.auth != null && 
                      request.auth.uid in resource.data.participants);
      
      // Allow write access for room owner
      allow write: if request.auth != null && 
                      request.auth.uid == resource.data.ownerUid;
      
      // Allow update to join public rooms (add self to participants)
      allow update: if request.auth != null &&
                       resource.data.visibility == 'public' &&
                       request.auth.uid in request.resource.data.participants &&
                       request.auth.uid not in resource.data.participants;
      
      // Allow create if user is authenticated
      allow create: if request.auth != null && 
                       request.auth.uid == request.resource.data.ownerUid;
    }
    
    // Message access rules
    match /messages/{messageId} {
      // Allow read if user has access to the room
      allow read: if request.auth != null &&
                     exists(/databases/$(database)/documents/rooms/$(resource.data.roomId)) &&
                     (get(/databases/$(database)/documents/rooms/$(resource.data.roomId)).data.visibility == 'public' ||
                      request.auth.uid in get(/databases/$(database)/documents/rooms/$(resource.data.roomId)).data.participants);
      
      // Allow create if user has access to the room
      allow create: if request.auth != null &&
                       exists(/databases/$(database)/documents/rooms/$(request.resource.data.roomId)) &&
                       request.auth.uid in get(/databases/$(database)/documents/rooms/$(request.resource.data.roomId)).data.participants;
      
      // Allow update/delete if user is the sender or room owner
      allow update, delete: if request.auth != null &&
                               (request.auth.uid == resource.data.senderUid ||
                                request.auth.uid == get(/databases/$(database)/documents/rooms/$(resource.data.roomId)).data.ownerUid);
    }
    
    // AI Summary access rules
    match /aiSummaries/{summaryId} {
      // Allow read if user has access to the room
      allow read: if request.auth != null &&
                     exists(/databases/$(database)/documents/rooms/$(resource.data.roomId)) &&
                     request.auth.uid in get(/databases/$(database)/documents/rooms/$(resource.data.roomId)).data.participants;
      
      // Only system can create summaries (in production, this would be handled by Cloud Functions)
      allow create: if request.auth != null;
    }
    
    // User billing access rules
    match /userBilling/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
  }
}